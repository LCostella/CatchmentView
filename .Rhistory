install.packages("networkD3")
install.packages("C:/Users/leona/Desktop/networkD3.zip", repos = NULL, type = "win.binary")
data(MisLinks)
data(MisNodes)
library(networkD3)
library(networkD3)
install.packages("C:/Users/leona/Desktop/networkD3.zip", repos = NULL, type = "win.binary")
library(networkD3)
src <- c("A", "A", "A", "A",
"B", "B", "C", "C", "D")
target <- c("B", "C", "D", "J",
"E", "F", "G", "H", "I")
networkData <- data.frame(src, target)
simpleNetwork(networkData)
teste(networkData)
install.packages("C:/Users/leona/Desktop/networkD3.rar", repos = NULL)
URL <- paste0("https://firebasestorage.googleapis.com/v0/b/api-ripe.appspot.com/o/dataAv6.json?alt=media&token=b8f65c4a-a7b3-4826-b391-52b77f0ccb01")
d3.netJsonGraph(URL, {
linkDistance: 30,
charge: -4000,
circleRadius: 12,
animationAtStart: false,
metadata: true,
linkClassProperty: "type",
defaultStyle: false   ,
nodeClassProperty: "type",
labelDy: "-1.8em",
});
d3.netJsonGraph(URL
linkDistance: 30,
charge: -4000,
circleRadius: 12,
animationAtStart: false,
metadata: true,
linkClassProperty: "type",
defaultStyle: false   ,
nodeClassProperty: "type",
labelDy: "-1.8em",
)
shiny::runApp('C:/Users/leona/Desktop/7563267-08a5ef0539dfbc770bbb67f9b7d5378bf283219d')
runApp('R/win-library/3.4/networkD3/examples/shiny')
runApp('R/win-library/3.4/networkD3/examples/shiny')
runApp('R/win-library/3.4/networkD3/examples/shiny')
runApp('R/win-library/3.4/networkD3/examples/shiny')
runApp('R/win-library/3.4/networkD3/examples/shiny')
runApp('R/win-library/3.4/networkD3/examples/shiny')
runApp('R/win-library/3.4/networkD3/examples/shiny')
runApp('R/win-library/3.4/networkD3/examples/shiny')
library(shiny)
jscode <- '
$(function() {
$(document).keypress(function(e) {
if (e.key == "1" || e.key == "2" || e.key == "3") {
Shiny.onInputChange("clickbox", [e.key, Math.random()]);
}
});
});
'
ui <- fluidPage(
tags$head(tags$script(HTML(jscode))),
h3("Press the keys 1, 2, 3 on your keyboard to tick/untick the boxes"),
checkboxInput("check1", "One"),
checkboxInput("check2", "Two"),
checkboxInput("check3", "Three")
)
server <- function(input, output, session) {
observeEvent(input$clickbox, {
boxname <- paste0("check", input$clickbox[1])
updateCheckboxInput(session, boxname, value = !input[[boxname]])
})
}
shinyApp(ui, server)
library(shiny)
jscode <- '
$(function() {
$(document).keypress(function(e) {
if (e.key == "1" || e.key == "2" || e.key == "3") {
Shiny.onInputChange("clickbox", [e.key, Math.random()]);
}
});
});
'
ui <- fluidPage(
tags$head(tags$script(HTML(jscode))),
h3("Press the keys 1, 2, 3 on your keyboard to tick/untick the boxes"),
checkboxInput("check1", "One"),
checkboxInput("check2", "Two"),
checkboxInput("check3", "Three")
)
server <- function(input, output, session) {
observeEvent(input$clickbox, {
boxname <- paste0("check", input$clickbox[1])
updateCheckboxInput(session, boxname, value = !input[[boxname]])
})
}
shinyApp(ui, server)
library(shiny)
jscode <- '
$(function() {
$(document).keypress(function(e) {
if (e.key == "1" || e.key == "2" || e.key == "3") {
Shiny.onInputChange("clickbox", [e.key, Math.random()]);
}
});
});
'
ui <- fluidPage(
tags$head(tags$script(HTML(jscode))),
h3("Press the keys 1, 2, 3 on your keyboard to tick/untick the boxes"),
checkboxInput("check1", "One"),
checkboxInput("check2", "Two"),
checkboxInput("check3", "Three")
)
server <- function(input, output, session) {
observeEvent(input$clickbox, {
boxname <- paste0("check", input$clickbox[1])
updateCheckboxInput(session, boxname, value = !input[[boxname]])
})
}
shinyApp(ui, server)
runApp('C:/Users/leona/Desktop/shiny-examples-master/104-plot-interaction-select')
runApp('C:/Users/leona/Desktop/shiny-examples-master/104-plot-interaction-select')
runApp(list(
ui = pageWithSidebar(
headerPanel('Dynamic Tabs'),
sidebarPanel(
numericInput("nTabs", 'No. of Tabs', 5)
),
mainPanel(
uiOutput('mytabs')
)
),
server = function(input, output, session){
output$mytabs = renderUI({
nTabs = input$nTabs
myTabs = lapply(paste('Tab', 1: nTabs), tabPanel)
do.call(tabsetPanel, myTabs)
})
}
))
library(shiny)
runApp(list(
ui = pageWithSidebar(
headerPanel('Dynamic Tabs'),
sidebarPanel(
numericInput("nTabs", 'No. of Tabs', 5)
),
mainPanel(
uiOutput('mytabs')
)
),
server = function(input, output, session){
output$mytabs = renderUI({
nTabs = input$nTabs
myTabs = lapply(paste('Tab', 1: nTabs), tabPanel)
do.call(tabsetPanel, myTabs)
})
}
))
library(shiny)
runApp(list(
ui = pageWithSidebar(
headerPanel('Dynamic Tabs'),
sidebarPanel(
numericInput("nTabs", 'No. of Tabs', 5)
),
mainPanel(
uiOutput('mytabs')
)
),
server = function(input, output, session){
output$mytabs = renderUI({
nTabs = input$nTabs
myTabs = lapply(paste('Tab', 1: nTabs), tabPanel)
do.call(tabsetPanel, myTabs)
})
}
))
library(shiny)
ui <- shinyUI(fluidPage(
# Important! : JavaScript functionality to add the Tabs
tags$head(tags$script(HTML("
/* In coherence with the original Shiny way, tab names are created with random numbers.
To avoid duplicate IDs, we collect all generated IDs.  */
var hrefCollection = [];
Shiny.addCustomMessageHandler('addTabToTabset', function(message){
var hrefCodes = [];
/* Getting the right tabsetPanel */
var tabsetTarget = document.getElementById(message.tabsetName);
/* Iterating through all Panel elements */
for(var i = 0; i < message.titles.length; i++){
/* Creating 6-digit tab ID and check, whether it was already assigned. */
do {
hrefCodes[i] = Math.floor(Math.random()*100000);
}
while(hrefCollection.indexOf(hrefCodes[i]) != -1);
hrefCollection = hrefCollection.concat(hrefCodes[i]);
/* Creating node in the navigation bar */
var navNode = document.createElement('li');
var linkNode = document.createElement('a');
linkNode.appendChild(document.createTextNode(message.titles[i]));
linkNode.setAttribute('data-toggle', 'tab');
linkNode.setAttribute('data-value', message.titles[i]);
linkNode.setAttribute('href', '#tab-' + hrefCodes[i]);
navNode.appendChild(linkNode);
tabsetTarget.appendChild(navNode);
};
/* Move the tabs content to where they are normally stored. Using timeout, because
it can take some 20-50 millis until the elements are created. */
setTimeout(function(){
var creationPool = document.getElementById('creationPool').childNodes;
var tabContainerTarget = document.getElementsByClassName('tab-content')[0];
/* Again iterate through all Panels. */
for(var i = 0; i < creationPool.length; i++){
var tabContent = creationPool[i];
tabContent.setAttribute('id', 'tab-' + hrefCodes[i]);
tabContainerTarget.appendChild(tabContent);
};
}, 100);
});
"))),
# End Important
tabsetPanel(id = "mainTabset",
tabPanel("InitialPanel1", "Some Text here to show this is InitialPanel1",
actionButton("goCreate", "Go create a new Tab!"),
textOutput("creationInfo")
),
tabPanel("InitialPanel2", "Some Text here to show this is InitialPanel2 and not some other Panel")
),
# Important! : 'Freshly baked' tabs first enter here.
uiOutput("creationPool", style = "display: none;")
# End Important
))
server <- function(input, output, session){
# Important! : creationPool should be hidden to avoid elements flashing before they are moved.
#              But hidden elements are ignored by shiny, unless this option below is set.
output$creationPool <- renderUI({})
outputOptions(output, "creationPool", suspendWhenHidden = FALSE)
# End Important
# Important! : This is the make-easy wrapper for adding new tabPanels.
addTabToTabset <- function(Panels, tabsetName){
titles <- lapply(Panels, function(Panel){return(Panel$attribs$title)})
Panels <- lapply(Panels, function(Panel){Panel$attribs$title <- NULL; return(Panel)})
output$creationPool <- renderUI({Panels})
session$sendCustomMessage(type = "addTabToTabset", message = list(titles = titles, tabsetName = tabsetName))
}
# End Important
# From here: Just for demonstration
output$creationInfo <- renderText({
paste0("The next tab will be named NewTab", input$goCreate + 1)
})
observeEvent(input$goCreate, {
nr <- input$goCreate
newTabPanels <- list(
tabPanel(paste0("NewTab", nr),
actionButton(paste0("Button", nr), "Some new button!"),
textOutput(paste0("Text", nr))
),
tabPanel(paste0("AlsoNewTab", nr), sliderInput(paste0("Slider", nr), label = NULL, min = 0, max = 1, value = 1))
)
output[[paste0("Text", nr)]] <- renderText({
if(input[[paste0("Button", nr)]] == 0){
"Try pushing this button!"
} else {
paste("Button number", nr , "works!")
}
})
addTabToTabset(newTabPanels, "mainTabset")
})
}
shinyApp(ui, server)
runApp('C:/Users/leona/Desktop/Plataforma/sep')
runApp('C:/Users/leona/Desktop/Plataforma/sep')
runApp('C:/Users/leona/Desktop/Plataforma/sep')
runApp('C:/Users/leona/Desktop/Plataforma/sep')
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(rsconnect::setAccountInfo(name='anycastcatchmenttool', token='D8F0F90B3BDC1B3324CCCBB4CDA5389E', secret='BfVDEXEZt5RCQVemUPYVFRdR5pFY12uvYFg4JmJ5'))
rsconnect::setAccountInfo(rsconnect::setAccountInfo(name="anycastcatchmenttool", token='D8F0F90B3BDC1B3324CCCBB4CDA5389E', secret='BfVDEXEZt5RCQVemUPYVFRdR5pFY12uvYFg4JmJ5'))
rsconnect::setAccountInfo(rsconnect::setAccountInfo(name=c("anycastcatchmenttool"), token='D8F0F90B3BDC1B3324CCCBB4CDA5389E', secret='BfVDEXEZt5RCQVemUPYVFRdR5pFY12uvYFg4JmJ5'))
library(rsconnect)
rsconnect::setAccountInfo(rsconnect::setAccountInfo(name='anycastcatchmenttool', token='D8F0F90B3BDC1B3324CCCBB4CDA5389E', secret='BfVDEXEZt5RCQVemUPYVFRdR5pFY12uvYFg4JmJ5'))
rsconnect::setAccountInfo(name='anycastcatchmenttool', token='D8F0F90B3BDC1B3324CCCBB4CDA5389E', secret='BfVDEXEZt5RCQVemUPYVFRdR5pFY12uvYFg4JmJ5')
install.packages(c('ggplot','shiny'))
shiny::runApp('C:/Users/leona/Desktop')
library(rsconnect)
deployApp()
runApp('C:/Users/leona/Desktop')
runApp('C:/Users/leona/Desktop/teste deploy')
library(rsconnect)
rsconnect::setAccountInfo(name='anycastcatchmenttool', token='D8F0F90B3BDC1B3324CCCBB4CDA5389E', secret='BfVDEXEZt5RCQVemUPYVFRdR5pFY12uvYFg4JmJ5')
shiny::runApp('C:/Users/leona/Desktop/Projeto v2/Plataforma/front')
runApp('C:/Users/leona/Desktop/Projeto v2/Plataforma/front')
runApp('C:/Users/leona/Desktop/Projeto v2/Plataforma/front')
runApp('C:/Users/leona/Desktop/Projeto v2/Plataforma/front')
runApp('C:/Users/leona/Desktop/Projeto v2/Plataforma/front')
is.null(simul)
is.na(simul)
dataset <- c(time,root)
dataset
runApp('C:/Users/leona/Desktop/Projeto v2/Plataforma/front')
runApp('C:/Users/leona/Desktop/Projeto v2/Plataforma/front')
runApp('C:/Users/leona/Desktop/Projeto v2/Plataforma/front')
runApp('C:/Users/leona/Desktop/Projeto v2/Plataforma/front')
runApp('C:/Users/leona/Desktop/Projeto v2/Plataforma/front')
runApp('C:/Users/leona/Desktop/Projeto v2/Plataforma/front')
runApp('C:/Users/leona/Desktop/Projeto v2/Plataforma/front')
runApp('C:/Users/leona/Desktop/Projeto v2/Plataforma/front')
runApp('C:/Users/leona/Desktop/Projeto v2/Plataforma/front')
runApp('C:/Users/leona/Desktop/Projeto v2/Plataforma/front')
runApp('C:/Users/leona/Desktop/Projeto v2/Plataforma/front')
runApp('C:/Users/leona/Desktop/Projeto v2/Plataforma/front')
runApp('C:/Users/leona/Desktop/Projeto v2/Plataforma/front')
shiny::runApp('C:/Users/leona/Desktop/Projeto v2/Plataforma/front')
runApp('C:/Users/leona/Desktop/Projeto v2/Plataforma/front')
runApp('C:/Users/leona/Desktop/Projeto v2/Plataforma/front')
runApp('C:/Users/leona/Desktop/Projeto v2/Plataforma/front')
